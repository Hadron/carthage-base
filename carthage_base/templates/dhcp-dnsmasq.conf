<%def name="handle_network(net,link)">\
<%interface = link.interface %>\
%for l,h in net.v4_config.dhcp_ranges:
dhcp-range=set:${interface},${l},${h},10h
%endfor
%if net.v4_config.gateway:
dhcp-option=tag:${interface},option:router,${net.v4_config.gateway}
%endif
%if net.v4_config.domains:
domain=${net.v4_config.domains.replace('~','')}
local=${net.v4_config.domains.replace('~','')}
%endif
%for server in link.merged_v4_config.dns_servers:
server=${server}
%endfor
%for l in net.network_links:
<%
if l.member_of: continue
v4 = l.merged_v4_config
name = l.machine.name
short_name = l.machine.name.partition(".")[0]
%>\
%if v4.dhcp and v4.address and l.mac:
dhcp-host=set:${interface},${l.mac},${v4.address},${name},18h
%elif v4.dhcp and l.mac:
dhcp-host=set:${interface},${l.mac},${name},18h
%endif
%if v4.address:
host-record=${name},${short_name},${v4.address},18h
%endif
%endfor
</%def>\
<%def name="hash()">
## change this date to indicate the source has changed enough to regenerate the template
2021-08-25
%for  net in sorted((l.net for l in model.network_links.values()), key = lambda n: n.name):
%for link in sorted(net.network_links, key = lambda link: (link.machine.name, link.interface)):
<%if link.member_of: continue%>\
${link.interface} ${link.machine.name} ${link.mac}
%endfor
%endfor
</%def>\

bind-dynamic

<%
nets = set()
for l in model.network_links.values():
    if l.net in nets: continue
    if l.member_of and  l.member_of_link.local_type  != 'vpn': continue
    nets.add(l.net)
    handle_network(l.net, l)
%>\
